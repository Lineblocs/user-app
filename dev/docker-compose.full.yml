version: "3.6"
x-logging: &default-logging
  options:
    max-size: "100m"
    max-file: "5"
  driver: json-file
services:
  apache:
    image: httpd:2.4
    container_name: lineblocs-apache-app
    restart: unless-stopped
    entrypoint:
      sh -c "
        ./shell_scripts/entrypoint.sh
        "
    environment:
      - DEPLOYMENT_DOMAIN=app.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=app.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8000
    volumes:
      - ../ports.conf:/etc/apache2/ports.conf
      - ../apache.conf:/usr/local/apache2/conf/httpd.conf
      - ..:/usr/local/apache2/htdocs/
    working_dir: /usr/local/apache2/htdocs
    ports:
     - ${APP_PORT_HOST}:8000
    networks:
      - lineblocs_internal_app
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: lineblocs-app-nginx-proxy
    ports:
      - "80:80"
    environment:
      - TRUST_DOWNSTREAM_PROXY=true
      - DHPARAM_GENERATION=false
      - HTTPS_METHOD=nohttps
    networks:
      - lineblocs_internal_app
    profiles:
      - enable_proxy
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
  user-app:
    # use image from dockerhub. Using node 11.10.1
    image: node:11.10.1
    volumes:
      - ..:/app
    logging: *default-logging
    working_dir: /app
    container_name: lineblocs-user-app
    restart: unless-stopped
    entrypoint:
      sh -c "
        npm config set unsafe-perm=true;
        npm install;
        npm install -g install gulp@3.9.1;
        npm install -g install node-sass@4.13.0 --unsafe-perm ;
        npm install -g install bower@1.8.8 ;
        ./shell_scripts/run_dev_server.sh ;
      "
    environment:
      - DEPLOYMENT_DOMAIN=app.${DEPLOYMENT_DOMAIN}
    networks:
      - lineblocs_internal_app
  editor: 
    image: lineblocs/flow-designer:${VERSION}
    logging: *default-logging
    container_name: lineblocs-editor
    restart: unless-stopped
    environment:
      - LINEBLOCS_VERSION=${VERSION}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=editor.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=editor.${DEPLOYMENT_DOMAIN}
    profiles:
      - enable_dependency
    networks:
      - lineblocs_internal_app
  site:
    image: lineblocs/site:${VERSION}
    logging: *default-logging
    container_name: lineblocs-site
    restart: unless-stopped
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USERNAME=${CONFIG_DB_USER:-}
      - DB_PASSWORD=${CONFIG_DB_PASSWORD:-}
      - DB_DATABASE=${CONFIG_DB_NAME:-}
      - DB_PORT=${CONFIG_DB_PORT:-}
      - DB_OPENSIPS_DATABASE=${CONFIG_DB_OPENSIPS_DATABASE:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=${DEPLOYMENT_DOMAIN}
    profiles:
      - enable_dependency
    networks:
      - lineblocs_internal_app
  mysqldb:
    image: mysql:latest
    container_name: lineblocs-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${CONFIG_DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${CONFIG_DB_PASSWORD}
      MYSQL_USER: ${CONFIG_DB_USER}
      SERVICE_NAME: mysql
    entrypoint:
      sh -c "
        echo 'CREATE DATABASE IF NOT EXISTS ${CONFIG_DB_NAME}; USE ${CONFIG_DB_NAME}; GRANT ALL  ON '\\`'${CONFIG_DB_NAME}'\\`'.* TO '\\''${CONFIG_DB_USER}'\\''@'\\''%'\\''; ' > /docker-entrypoint-initdb.d/init.sql;
        echo 'CREATE DATABASE IF NOT EXISTS ${CONFIG_DB_OPENSIPS_DATABASE}; USE ${CONFIG_DB_OPENSIPS_DATABASE}; GRANT ALL  ON '\\`'${CONFIG_DB_OPENSIPS_DATABASE}'\\`'.* TO '\\''${CONFIG_DB_USER}'\\''@'\\''%'\\''; ' >> /docker-entrypoint-initdb.d/init.sql;
        /usr/local/bin/docker-entrypoint.sh  --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password
      "
    volumes:
      - ./mysql/dbinitial:/docker-entrypoint-initdb.d/
    ports:
     - ${MYSQL_PORT_HOST}:3306
    profiles:
      - enable_dependency
    networks:
      - lineblocs_internal_app
networks:
  lineblocs_internal_app: